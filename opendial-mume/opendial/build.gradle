/**
 * Gradle Build file for OpenDial (based on a previous file written by Ingmar Steiner).
 */


apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
mainClassName = 'opendial.DialogueSystem'
version = '1.4'


/**
 * External repositories for the transitive dependencies 
 */
repositories {
    flatDir {
        dirs file("${projectDir}/lib")
    }
    maven {
        url "https://jcenter.bintray.com"
    }

    // for Sphinx ASR
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    mavenCentral()
}


/**
 * Source Java files for the main code and the test suite
 */
sourceSets {
    main {
        java {
            srcDirs 'src'
            exclude 'opendial/plugins/MaltParser.java'
            exclude 'opendial/plugins/SphinxASR.java'
            exclude 'opendial/plugins/MaryTTS.java'
            exclude 'opendial/plugins/GoogleASR.java'
            //		exclude 'opendial/plugins/Nao*'
        }
    }
    test {
        java {
            srcDirs 'test'
            exclude 'domains/**'
        }
    }
}


/**
 * Transitive dependencies
 */
dependencies {
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3+'
    compile group: 'net.java.balloontip', name: 'balloontip', version: '1.2+'
    compile group: 'org.json', name: 'org.json', version: '2.0'
    compile group: 'org.jfree', name: 'jfreechart', version: '1.0.19+'
    compile group: 'net.sf.jung', name: 'jung-graph-impl', version: '2.0.1'
    compile group: 'net.sf.jung', name: 'jung-visualization', version: '2.0.1'
////  compile group: 'de.dfki.mary', name: 'marytts-runtime', version: '5.2-beta2'
////  compile group: 'de.dfki.mary', name: 'voice-cmu-slt-hsmm', version: '5.2-beta2'
//  compile group: 'org.apache.commons', name: 'commons-math3', version: '3.2'
//  compile group: 'edu.cmu.sphinx', name: 'sphinx4-core', version:'5prealpha-SNAPSHOT'
//  compile group: 'edu.cmu.sphinx', name: 'sphinx4-data', version:'5prealpha-SNAPSHOT'
////  compile group: 'org.maltparser', name: 'maltparser', version:'1.8.1'
////  compile group: 'edu.stanford.nlp', name: 'stanford-corenlp', version:'3.5.2'
//	compile name: 'qimessaging'

    compile name: 'exp4j'
//    testCompile group: 'junit', name: 'junit', version: '4.+'

//  compile group: 'org.apache.uima', name: 'uimaj-core', version: '2.8.1'
//  compile group: 'com.github.heideltime', name: 'heideltime', version: '2.2.1'

//  compile 'org.jsoup:jsoup:1.11.3'

    compile 'com.google.maps:google-maps-services:0.9.0'
    compile 'org.slf4j:slf4j-simple:1.7.25'

    compile 'eu.fbk.dh:tint-runner:0.2'
    compile 'eu.fbk.dh:tint-geoloc-annotator:0.1'

    compile group: 'org.languagetool', name: 'language-it', version: '4.5'

}


/**
 * Ensuring that all Java files are compiled with Java 8
 */
tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

/**
 * Properties for the JUnit tests
 */
test {
    testLogging {
        exceptionFormat = 'full'
    }
    systemProperty 'file.encoding', 'UTF-8'
}

/**
 * Running the main class directly from Gradle 
 */
run {
    systemProperties System.getProperties()
    systemProperty 'file.encoding', 'UTF-8'
    standardInput = System.in
}


/**
 * Compiles the distribution, adds the resulting jar files in ./lib and
 * associated scripts (for Unix and Windows) in ./scripts
 */
task compile(type: Copy) {
    dependsOn distTar
    from tarTree(distTar.archivePath)
    into "$buildDir/install"
    doLast {
        delete("scripts")
        delete("lib")
        file("$buildDir/install/${project.name}-${project.version}/bin").renameTo(file("scripts"))
        file("$buildDir/install/${project.name}-${project.version}/lib").renameTo(file("lib"))
        delete("$buildDir/install")
    }
}

/**
 * Making sure the JVM arguments are passed in the script
 */
startScripts {
    // This should resolve the input-line-is-too-long problem
    doLast {
        def winScriptFile = file getWindowsScript()
        def winFileText = winScriptFile.text
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem original CLASSPATH declaration replaced by:\nset CLASSPATH=%APP_HOME%\\\\lib\\\\\\*')
        winScriptFile.text = winFileText

        unixScript.text = unixScript.text.replaceFirst("\n", "\nJAVA_OPTS=\"\\\$@\"\n")

    }

//    doLast {
//        unixScript.text = unixScript.text.replaceFirst("\n", "\nJAVA_OPTS=\"\\\$@\"\n")
//        windowsScript.text = windowsScript.text.replaceFirst("\n", "\nset JAVA_OPTS=%* \n")
//    }
}


/**
 * Allows easy integration with eclipse
 */
eclipse {
    classpath {
        defaultOutputDir = sourceSets.main.output.classesDir
    }
}


/**
 * Compiles the jar file for the OpenDial java files
 */
jar {

    // need to copy the resources files
    doFirst {
        copy {
            from 'resources'
            into 'build/resources/main/resources'
        }
    }
    manifest {
        attributes('Main-Class': project.mainClassName)
    }
}
